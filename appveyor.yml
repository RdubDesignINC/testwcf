# Notes:
#   - Minimal appveyor.yml file is an empty file. All sections are optional.
#   - Indent each level of configuration with 2 spaces. Do not use tabs!
#   - All section names are case-sensitive.
#   - Section names should be unique on each level.

#---------------------------------#
#      general configuration      #
#---------------------------------#

# version format
version: 1.2.{build}
# you can use {branch} name in version format too
# version: 1.0.{build}-{branch}

# branches to build
branches:
  # whitelist
  only:
    - master

  # blacklist
  #  except:

# Do not build on tags (GitHub and BitBucket)
skip_tags: true

# Start builds on tags only (GitHub and BitBucket)
# skip_non_tags: true

# Skipping commits with particular message or from specific user

#skip_commits:
#  message: /Created.*\.(png|jpg|jpeg|bmp|gif)/      # Regex for matching commit message
#  author: John

# Including commits with particular message or from specific user

#only_commits:
#  message: /build/                # Start a new build if message contains 'build'
#  author: jack@company.com        # Start a new build for commit of user with email jack@company.com


# Skipping commits affecting specific files (GitHub only). More details here: /docs/appveyor-yml
#skip_commits:
#  files:
#    - docs/*
#    - '**/*.html'

# Including commits affecting specific files (GitHub only). More details here: /docs/appveyor-yml
#only_commits:
#  files:
#    - Project-A/
#    - Project-B/

# Do not build feature branch with open Pull Requests
skip_branch_with_pr: true

# Maximum number of concurrent jobs for the project
max_jobs: 1 

shallow_clone: true

# environment variables
environment:
  my_var1: value1
  my_var2: value2
  # this is how to set encrypted variable. Go to "Encrypt data" page in account menu to encrypt data.
  my_secure_var1:
    secure: FW3tJ3fMncxvs58/ifSP7w==

# environment:
#  global:
#    connection_string: server=12;password=13;
#    service_url: https://127.0.0.1:8090
#
#  matrix:
#  - db: mysql
#    provider: mysql
#
#  - db: mssql
#    provider: mssql
#    password:
#      secure: $#(JFDA)jQ@#$

# enable patching of AssemblyInfo.* files
#assembly_info:
#  patch: true
#  file: AssemblyInfo.*
#  assembly_version: "2.2.{build}"
#  assembly_file_version: "{version}"
#  assembly_informational_version: "{version}"

# build platform, i.e. x86, x64, Any CPU. This setting is optional.
configuration: Debug

platform: Any CPU

# Build settings, not to be confused with "before_build" and "after_build".
# "project" is relative to the original build directory and not influenced by directory changes in "before_build".
build:
#  parallel: true                  # enable MSBuild parallel builds
#  project: MyTestAzureCS.sln      # path to Visual Studio solution or project
#  publish_wap: true               # package Web Application Projects (WAP) for Web Deploy
#  publish_wap_xcopy: true         # package Web Application Projects (WAP) for XCopy deployment
#  publish_azure: true             # package Azure Cloud Service projects and push to artifacts
#  publish_nuget: true             # package projects with .nuspec files and push to artifacts
#  publish_nuget_symbols: true     # generate and publish NuGet symbol packages
  include_nuget_references: true  # add -IncludeReferencedProjects option while packaging NuGet artifacts

  # MSBuild verbosity level quiet|minimal|normal|detailed
  verbosity: normal

before_build:
    - ps: Write-Host "$(var1)"

after_build:
    - ps: dir
    - ps: Write-Host "This is Powershell"


# scripts to run *after* solution is built and *before* automatic packaging occurs (web apps, NuGet packages, Azure Cloud Services)
before_package:

# to disable automatic builds
#build: off

#---------------------------------#
#      artifacts configuration    #
#---------------------------------#

#artifacts:

  # pushing a single file
 # - path: test.zip

 # pushing a single file with environment variable in path and "Deployment name" specified
 # - path: MyProject\bin\$(configuration)
 #   name: myapp

# pushing entire folder as a zip archive
#  - path: logs

  # pushing all *.nupkg files in build directory recursively
 # - path: '**\*.nupkg'
artifacts:
  - path: wcfTest
  - path: consoleTest

on_success:
    - ps: |
        if ($true)
        {
            Write-Host "Success"
        }